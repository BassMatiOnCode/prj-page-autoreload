<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2023-12-17" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2024-03-20" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2024-03-20" />
<meta name="version" content="1" />
<meta name="categories" content="Projects > Programming > HTML Page Auto-Reloader" />
<meta name="tags" content="project, HTML, JavaScript, header, reload, page, changed, mtime, modification, date, time, 304, if-none-match, if-modified-since" />
<meta name="description" content="This project is a development plug-in for web pages. It causes the browser to automatically reload a web page if the source file has changed. No special server is required, the script is entirely client-side." />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" sizes="all" />
<link rel="stylesheet" href="/inc/page-2.css" />
 
<title>Projects > Programming > HTML Page Auto–Reload</title>

</head><body><header id="page-header"><object data="title.svg" type="image/svg+xml"></object></header><div id="main-toolbar"></div><main id="page-content">

<h1>HTML Page Auto&ndash;Reload</h1>

<p id="page-abstract"></p>

<h2 cbc>Usage</h2><div>

<p>1. Download the file ".../code/page-autoreload-1.js" to a suitable project folder, for example to "/inc/page-autoreload/page-autoreload-1.js".</p>

<p>2. Place a script element in the HTML file(s) you are working on:</p>

<pre><hi>&lt;script</hi> type="module" 
src="/inc/page-autoreload/page-autoreload-1.js"&gt;
<hi>&lt;/script&gt;</hi></pre>

<p>By default, the script monitors the current document in the browser.</p>

<p>3. When done, remove the script element from the page(s) before publication.</p>

<p>4. In a production environment, replace "/inc/page-autoreload/page-autoreload-1.js" with an empty file. This ensures that the script is not running accidently and causing unnecessary server load. The empty file also avoids "file not found" errors on the client side.</p>

<p>5. If you want to monitor additional files, add a watchlist to the script url:</p>

<pre>&lt;script type="module" 
src="/inc/page-autoreload/page-autoreload-1.js<hi>?watch=document.htm, /inc/page.css, /inc/page.js"</hi>"&gt;
&lt;/script&gt;</pre>

<!--h2--Usage--></div>

<h2 cbc>Concept</h2><div>

<p>A script on the page sends periodic HEAD requests to the server and compares the "last-modied" header of the current request with that of the first request. If the mtime changes, for example because the html file was saved to disk, the browser is forced to reload the page.</p>  

<p>Network traffic and server load are kept low because we only request headers, not content.</p>

<!--h2--Concept--></div>

<h2 cbc>Implementation</h2><div>

<p>An IFEE ensures that the global namespace is not polluted:</p>

<figcaption class="listing">The code (version 1.0)</figcaption>
<pre>(function(){ &hellip; })();</pre>

<p>The function body contains the implementation:</p>

<figcaption class="listing">The code (version 1)</figcaption>
<pre>
let mtime = "" ;
setInterval( () => { 
	fetch( window.location, { method : "HEAD" })
	.then( response => {
		const currentMtime = response.headers.get("last-modified");
		if ( mtime === "" ) mtime = currentMtime ;
		else if ( mtime !== currentMtime ) window.location.reload();
		} ) ;
	} , 3000 ) ;
</pre>

<p>The script sets up an interval timer with a period of 3000 milliseconds and supplies a callback function to <tt>setInterval()</tt>.</p>

<p>The callback function fetches the headers for the current document and determines the current modification time (mtime) of the file on the server. The first run initializes the local <tt>mtime</tt> variable (which is scoped to the outermost anonymous function).</p>

<p>The following runs compare the current mtime with the saved mtime. If they differ, the page is reloaded.</p>

<p>That's all.</p>

<!--h2--Implementation--></div>

<h2 cbc>Activation and Deactivation</h2><div>

<p>If the symbolic link <tt>\inc\page-autoreload\page-autoreload.js</tt> points to <tt>page-autoreload-1.js</tt>, the reloader is activated. If the link points to the empty file <tt>\inc\page-autoreload\page-autoreload.off</tt>, the auto-reloader is deactivated.</p>

<p>If you ensure that the active script files cannot be deployed to the server, all production web pages will not be affected by the autoreloader.</p>

<!--h2--Activation and Deactivation--></div>

<h2 cbc>Version 2: Improvements </h2><div>

<p>The version 1 reloader only works for the html document. Scripts and CSS files are not observed and thus don't cause the page to be reloaded. Version 2 adds a mechanism to get <em>parameters</em> from the HTML document to the script code in <tt>page-autoreload-2.js</tt>. The developer includes a slightly changed script element in the HTML page:</p>

<figcaption class="listing">Adding a watchlist</figcaption>
<pre>
&lt;script type="module" 
src="/inc/page-autoreload/page-autoreload-1.js<hi>?watch=document.htm, /inc/page.css, /inc/page.js"</hi>&gt;
&lt;/script&gt;
</pre>

<p>The addition is higlighted above. The watchlist is a comma-separated list of urls to be monitored by the script.</p>

<p>The script must look out for that <tt>watch</tt> parameter and build the watchlist:</p>

<figcaption class="listing">Compiling the watchlist</figcaption>
<pre>
const searchParams = new URL(import.meta.url).searchParams || "" ;
let watchlist = searchParams.get("watch");
if ( ! watchlist ) watchlist = [ window.location.pathname ];
else watchlist = watchlist.replace( /,\s*/g, "," ).split(",");
for ( let i = 0 ; i < watchlist.length ; i ++ ) 
	watchlist[ i ] = { url : watchlist[ i ] , mtime : "" };
</pre>

<p>If there is none, the document location is added as single entry to the watchlist. Otherwise, the comma-separated list is split into individual array entries. The final step is to add and object wrapper around the array elements and add an empty <tt>mtime</tt> field to each url.</p>

<p>The next step is to set up the three seconds interval timer in the same manner as before:</p>

<figcaption class="listing">Setting up the interval timer</figcaption>
<pre>
setInterval( ( ) => { &hellip; }, 3000 ) ;
</pre>

<p>The body of the callback function fetches the headers for all resources defined in the <tt>watchlist</tt>, and stores the promises returned by <tt>fetch()</tt> in the array <tt>requestResults</tt>.</p>

<figcaption class="listing">Fetching the watchlist resources</figcaption>
<pre>
const requestResults = watchlist.map ( 
	entry => fetch( entry.url, { method : "HEAD" })
	);
</pre>

<p>This array is then passed to <tt>Promise.allSettled()</tt>, which waits until all requests have been processed. Then the results are processed individually in a for counting loop:</p>

<figcaption class="listing">Waiting for the responses</figcaption>
<pre>
Promise.allSettled(requestResults).then(requestResults => {
	for ( let i = 0 ; i < requestResults.length ; i ++ ) 
		if ( requestResults[ i ].status === "fulfilled" ) {
		...
	}	} ) ;
</pre>

<p>If the request has not been rejected, the mtime processing logic is run. This should already be familiar from the implementation of version 1:</p>

<figcaption class="listing">mtime processing logic</figcaption>
<pre>
const mtime = requestResults[i].value.headers.get( "last-modified" );
if ( watchlist[i].mtime === "" ) watchlist[i].mtime = mtime ;
else if ( watchlist[i].mtime !== mtime ) { 
	window.location.reload(); 
	break;
	}
</pre>

<p>In the first run, the <tt>mtime</tt> in the watchlist entry is initialized. In the following runs, the stored mtime is compared with the current mtime. If they differ, the document is reloaded and the watchlist processing loop is canceled.</p>

<p>Done.</p>

<!--h2--Improvements--></div>

</main><footer id="page-footer"></footer>
<script type="module" src="/inc/page.js" ></script>
<xscript type="module" src="/inc/page-autoreload/page-autoreload.js"></xscript>
<xscript type="module" src="/inc/page-autoreload/page-autoreload-2.js?watch=/inc/page-2.css, prj-page-autoreload.htm"></xscript>
</body></html>